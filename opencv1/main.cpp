//
//  AddingImagesTrackbar.cpp
//  opencv1
//
//  Created by Jayyoung Yang on 04/11/2018.
//  Copyright Â© 2018 Jayyoung Yang. All rights reserved.
//

//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
#include <unistd.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
char keyboard; //input from keyboard
void help();
void processImages(char* firstFrameFilename);
void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process images (-img)."             << endl
    << endl
    << "Usage:"                                                                     << endl
    << "./bg_sub {-img <image filename>}"                     << endl
    << "or: ./bg_sub -img /data/images/1.png"                                       << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}
int main(int argc, char* argv[])
{
    //print help information
    help();
    //check for the input parameter correctness
    if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(false); //MOG2 approach

    if(strcmp(argv[1], "-img") == 0) {
        //input data coming from a sequence of images
        processImages(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}

void processImages(char* fistFrameFilename) {
    //read the first file of the sequence
    frame = imread(fistFrameFilename, 0);
    if(frame.empty()){
        //error in opening the first image
        cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
        exit(EXIT_FAILURE);
    }
    //current image filename
    string fn(fistFrameFilename);
    //read input data. ESC or 'q' for quitting
    keyboard = 0;
    while( keyboard != 'q' && keyboard != 27 ){
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);

//        threshold(fgMaskMOG2, fgMaskMOG2, 200, 255, THRESH_MASK);
        //get the frame number and write it on the current frame
        size_t index = fn.find_last_of("/");
        if(index == string::npos) {
            index = fn.find_last_of("\\");
        }
        size_t index2 = fn.find_last_of(".");
        string prefix = fn.substr(0,index+1);
        string suffix = fn.substr(index2);
        string frameNumberString = fn.substr(index+1, index2-index-1);
        istringstream iss(frameNumberString);
        int frameNumber = 0;
        iss >> frameNumber;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = (char)waitKey( 30 );
        //search for the next image in the sequence
        ostringstream oss;
        oss << (frameNumber + 1);
        printf("current frameNumber: %d\n", frameNumber);
        string nextFrameNumberString = oss.str();
        string nextFrameFilename = prefix + nextFrameNumberString + suffix;
        //read the next frame
        frame = imread(nextFrameFilename, 0);
        sleep(2);
        if(frame.empty()){
            //error in opening the next image in the sequence
            cerr << "Unable to open image frame: " << nextFrameFilename << endl;
            exit(EXIT_FAILURE);
        }
        //update the path of the current frame
        fn.assign(nextFrameFilename);
    }
}

//#include <iostream>
//#include <sstream>
//#include <opencv2/imgcodecs.hpp>
//#include <opencv2/imgproc.hpp>
//#include <opencv2/videoio.hpp>
//#include <opencv2/highgui.hpp>
//#include <opencv2/video.hpp>
//using namespace cv;
//using namespace std;
//const char* params
//= "{ help h         |                   | Print usage }"
//"{ input          | /Users/jayyoungyang/Downloads/IMG_4108.MOV | Path to a video or a sequence of image }"
//"{ algo           | MOG2              | Background subtraction method (KNN, MOG2) }";
//int main(int argc, char* argv[])
//{
//    CommandLineParser parser(argc, argv, params);
//    parser.about( "This program shows how to use background subtraction methods provided by "
//                 " OpenCV. You can process both videos and images.\n" );
//    if (parser.has("help"))
//    {
//        //print help information
//        parser.printMessage();
//    }
//    //create Background Subtractor objects
//    Ptr<BackgroundSubtractor> pBackSub;
//    if (parser.get<String>("algo") == "MOG2")
//        pBackSub = createBackgroundSubtractorMOG2(false);
//    else
//        pBackSub = createBackgroundSubtractorKNN();
//    VideoCapture capture(parser.get<String>("input"));
//    if (!capture.isOpened()){
//        //error in opening the video input
//        cerr << "Unable to open: " << parser.get<String>("input") << endl;
//        return 0;
//    }
//    Mat frame, fgMask;
//    while (true) {
//        capture >> frame;
//        if (frame.empty())
//            break;
//        //update the background model
//        pBackSub->apply(frame, fgMask);
//        //get the frame number and write it on the current frame
//        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
//                  cv::Scalar(255,255,255), -1);
//        stringstream ss;
//        ss << capture.get(CAP_PROP_POS_FRAMES);
//        string frameNumberString = ss.str();
//        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
//                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
//        //show the current frame and the fg masks
//        imshow("Frame", frame);
//        imshow("FG Mask", fgMask);
//        //get the input from the keyboard
//        int keyboard = waitKey(30);
//        if (keyboard == 'q' || keyboard == 27)
//            break;
//    }
//    return 0;
//}
